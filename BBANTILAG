local function setSmoothPlastic(part)
    if part:IsA("BasePart") then
        -- Check if the part is not a player's character
        if not part:IsDescendantOf(game.Players.LocalPlayer.Character) then
            part.Material = Enum.Material.SmoothPlastic -- Set material to SmoothPlastic
            part.CastShadow = false -- Disable shadows
            part.Reflectance = 0 -- Remove reflectance
        end
    end
end

local function revertToSmoothPlastic(part)
    if part:IsA("BasePart") then
        part.Material = Enum.Material.SmoothPlastic -- Revert material to SmoothPlastic
            part.CastShadow = false -- Disable shadows
            part.Reflectance = 0 -- Remove reflectance
    end
end

local function removeWaterAndEffects()
    -- Remove water
    for _, descendant in ipairs(game.Workspace:GetDescendants()) do
        if descendant:IsA("MeshPart") and descendant.Name == "Water" then
            descendant:Destroy()
        end
    end

    -- Remove fire, smoke, and sparkles effects
    for _, effect in ipairs(game.Workspace:FindPartsInRegion3(
        game.Workspace.CurrentCamera.CFrame.Position,
        game.Workspace.CurrentCamera.CFrame.Position + game.Workspace.CurrentCamera.CFrame.LookVector * 100,
        nil)) do
        if effect:IsA("Fire") or effect:IsA("Smoke") or effect:IsA("Sparkles") then
            effect:Destroy()
        end
    end
end

local function updateMaterials(obj)
    if obj:IsA("BasePart") then
        setSmoothPlastic(obj)
    end
end

local function onDescendantAdded(descendant)
    updateMaterials(descendant)
    descendant.DescendantAdded:Connect(function(child)
        updateMaterials(child)
    end)
end

-- Initial run when the script is loaded
for _, part in ipairs(game.Workspace:GetDescendants()) do
    updateMaterials(part)
end

removeWaterAndEffects()

-- Update materials whenever a new part is added to the Workspace
game.Workspace.DescendantAdded:Connect(onDescendantAdded)

-- Revert materials whenever a texture is changed
game.Workspace.DescendantChanged:Connect(function(descendant)
    revertToSmoothPlastic(descendant)
end)

-- FPS and Ping Counter
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local Fps = Instance.new("TextLabel")
Fps.Size = UDim2.new(0, 125, 0, 25)
Fps.Font = Enum.Font.Arcade
Fps.TextColor3 = Color3.fromRGB(255, 255, 255)
Fps.TextScaled = true
Fps.TextSize = 14
Fps.TextWrapped = true
Fps.Parent = ScreenGui

local Ping = Instance.new("TextLabel")
Ping.Size = UDim2.new(0, 125, 0, 25)
Ping.Font = Enum.Font.Arcade
Ping.TextColor3 = Color3.fromRGB(253, 253, 253)
Ping.TextScaled = true
Ping.TextSize = 14
Ping.TextWrapped = true
Ping.Position = UDim2.new(0.700000048, 0, 0, 0)
Ping.Parent = ScreenGui

local function updateStats()
    while true do
        local fps = math.round(1 / (1 / game.Workspace:GetRealPhysicsFPS())) -- Calculate FPS using real physics FPS
        local ping = game:GetService("Stats"):FindFirstChild("Ping"):GetValueString() -- Get ping

        -- Update labels with FPS and ping information
        Fps.Text = "FPS: " .. fps
        Ping.Text = "Ping: " .. ping

        wait(1) -- Wait for 1 second before updating again
    end
end

-- Start the function to update stats in a separate thread to avoid blocking the main thread
coroutine.wrap(updateStats)()
