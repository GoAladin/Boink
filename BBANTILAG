local function setSmoothPlastic(part)
    if part:IsA("BasePart") then
        if not part:IsDescendantOf(game.Players.LocalPlayer.Character) then
            part.Material = Enum.Material.SmoothPlastic
        end
    end
end

local function removeEffects()
    -- Remove water from terrain
    local terrainWater = game.Workspace:FindPartsInRegion3(Region3.new(Vector3.new(-5000, -5000, -5000), Vector3.new(5000, 5000, 5000)), nil)
    for _, waterPart in pairs(terrainWater) do
        if waterPart:IsA("Water") or waterPart.Name == "Water" then
            waterPart:Destroy()
        end
    end

    -- Remove fire and smoke effects
    local fireList = game.Workspace:FindPartsInRegion3(
        Region3.new(game.Workspace.CurrentCamera.CFrame.Position, game.Workspace.CurrentCamera.CFrame.Position + game.Workspace.CurrentCamera.CFrame.LookVector * 100),
        nil
    )
    for _, fire in pairs(fireList) do
        if fire:IsA("Fire") or fire:IsA("Smoke") then
            fire:Destroy()
        end
    end

    -- Remove other particle effects if needed
    local particleList = game.Workspace:FindPartsInRegion3(
        Region3.new(game.Workspace.CurrentCamera.CFrame.Position, game.Workspace.CurrentCamera.CFrame.Position + game.Workspace.CurrentCamera.CFrame.LookVector * 100),
        nil
    )
    for _, particle in pairs(particleList) do
        if particle:IsA("ParticleEmitter") or particle:IsA("Sparkles") or particle:IsA("Smoke") then
            particle:Destroy()
        end
    end
end

local function optimizeMeshes()
    local parts = game.Workspace:GetDescendants()
    for _, part in ipairs(parts) do
        if part:IsA("MeshPart") then
            local originalMesh = part.MeshId
            if originalMesh ~= "" then
                part.MeshId = ""
                wait(0.1)

                local vertexCount = part:FindFirstChild("MeshPart").VertexCount
                if vertexCount > 1000 then
                    part.MeshId = originalMesh
                    part:FindFirstChild("MeshPart").Scale = Vector3.new(0.5, 0.5, 0.5)
                else
                    part.MeshId = originalMesh
                end
            end
        end
    end
end

local function updateMapMaterials()
    local parts = game.Workspace:GetDescendants()
    for _, part in ipairs(parts) do
        setSmoothPlastic(part)
    end
end

local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = playerGui

local Fps = Instance.new("TextLabel")
-- Your existing code for FPS counter

local Ping = Instance.new("TextLabel")
-- Your existing code for Ping counter

updateMapMaterials()
removeEffects()

local function updateStats()
    while true do
        local fps = math.round(1 / (1 / game.Workspace:GetRealPhysicsFPS()))
        local ping = game:GetService("Stats"):FindFirstChild("Ping"):GetValueString()

        Fps.Text = "FPS: " .. fps
        Ping.Text = "Ping: " .. ping

        wait(1)
    end
end

local function main()
    while true do
        optimizeMeshes()
        removeEffects() -- Remove effects in every loop iteration
        wait(1)
    end
end

coroutine.wrap(updateStats)()
coroutine.wrap(main)()
